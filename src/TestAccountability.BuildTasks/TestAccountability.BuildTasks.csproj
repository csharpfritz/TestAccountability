<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<TargetFramework>netstandard2.0</TargetFramework>
		<!--<IncludeBuildOutput>false</IncludeBuildOutput>-->
		<ImplicitUsings>enable</ImplicitUsings>
		<Nullable>enable</Nullable>
		<LangVersion>latest</LangVersion>
		<title>TestAccountability.BuildTasks</title>
		<authors>Jeffrey T. Fritz and Friends</authors>
		<description>Generates a report of Features and Issues that tests reference</description>
		<tags>unit testing</tags>
		<copyright>Copyright ©Fritz and Friends 2025</copyright>
		<!-- we need the assemblies bundled, so set this so we don't expose any dependencies to the outside world -->
		<GenerateDependencyFile>true</GenerateDependencyFile>
		<TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
		<!-- This property tells MSBuild where the root folder of the package's build assets should be. Because we are not a library package, we should not pack to 'lib'. Instead, we choose 'tasks' by convention. -->
		<BuildOutputTargetFolder>tasks</BuildOutputTargetFolder>
		<!-- NuGet does validation that libraries in a package are exposed as dependencies, but we _explicitly_ do not want that behavior for MSBuild tasks. They are isolated by design. Therefore we ignore this specific warning. -->
		<NoWarn>NU5100</NoWarn>
		<DebugType>embedded</DebugType>
		<IsPackable>true</IsPackable>
		<PackageOutputPath>..\..\Packages</PackageOutputPath>
		<PackageVersion>1.0.2</PackageVersion>
	</PropertyGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Build.Utilities.Core" Version="16.8.0" PrivateAssets="all" ExcludeAssets="Runtime" />
		<PackageReference Include="Microsoft.Build.Framework" Version="16.8.0" PrivateAssets="all" />
		<PackageReference Include="System.Text.Json" Version="9.0.1" PrivateAssets="all" />
	</ItemGroup>

	<ItemGroup>
		<ProjectReference Include="..\TestAccountability\TestAccountability.csproj" PrivateAssets="all" />
	</ItemGroup>

	<ItemGroup>
		<!-- These lines pack the build props/targets files to the `build` folder in the generated package.
         By convention, the .NET SDK will look for build\<Package Id>.props and build\<Package Id>.targets
         for automatic inclusion in the build. -->
		<Content Include="build\TestAccountability.BuildTasks.props" PackagePath="build\" />
		<Content Include="build\TestAccountability.BuildTasks.targets" PackagePath="build\" />
	</ItemGroup>

	<Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
		<ItemGroup>
			<!-- The dependencies of your MSBuild task must be packaged inside the package, they cannot be expressed as normal PackageReferences -->
			<BuildOutputInPackage Include="@(ReferenceCopyLocalPaths)" TargetPath="%(ReferenceCopyLocalPaths.DestinationSubPath)" />
		</ItemGroup>
	</Target>

	<!-- This target adds the generated deps.json file to our package output -->
	<Target Name="AddBuildDependencyFileToBuiltProjectOutputGroupOutput" BeforeTargets="BuiltProjectOutputGroup" Condition=" '$(GenerateDependencyFile)' == 'true'">

		<ItemGroup>
			<BuiltProjectOutputGroupOutput Include="$(ProjectDepsFilePath)" TargetPath="$(ProjectDepsFileName)" FinalOutputPath="$(ProjectDepsFilePath)" />
		</ItemGroup>
	</Target>

</Project>

	